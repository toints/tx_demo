{
  "_args": [
    [
      {
        "raw": "babel-plugin-transform-decorators-legacy@^1.3.4",
        "scope": null,
        "escapedName": "babel-plugin-transform-decorators-legacy",
        "name": "babel-plugin-transform-decorators-legacy",
        "rawSpec": "^1.3.4",
        "spec": ">=1.3.4 <2.0.0",
        "type": "range"
      },
      "/home/ubuntu/test/demo/node_modules/vnscoinjs-util/node_modules/documentation"
    ]
  ],
  "_from": "babel-plugin-transform-decorators-legacy@>=1.3.4 <2.0.0",
  "_id": "babel-plugin-transform-decorators-legacy@1.3.5",
  "_inCache": true,
  "_location": "/babel-plugin-transform-decorators-legacy",
  "_nodeVersion": "10.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/babel-plugin-transform-decorators-legacy_1.3.5_1527709580735_0.8732253556188978"
  },
  "_npmUser": {
    "name": "loganfsmyth",
    "email": "loganfsmyth@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-transform-decorators-legacy@^1.3.4",
    "scope": null,
    "escapedName": "babel-plugin-transform-decorators-legacy",
    "name": "babel-plugin-transform-decorators-legacy",
    "rawSpec": "^1.3.4",
    "spec": ">=1.3.4 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/documentation"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-transform-decorators-legacy/-/babel-plugin-transform-decorators-legacy-1.3.5.tgz",
  "_shasum": "0e492dffa0edd70529072887f8aa86d4dd8b40a1",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-transform-decorators-legacy@^1.3.4",
  "_where": "/home/ubuntu/test/demo/node_modules/vnscoinjs-util/node_modules/documentation",
  "author": {
    "name": "Logan Smyth",
    "email": "loganfsmyth@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy/issues"
  },
  "dependencies": {
    "babel-plugin-syntax-decorators": "^6.1.18",
    "babel-runtime": "^6.2.0",
    "babel-template": "^6.3.0"
  },
  "description": "A plugin for Babel 6 that (mostly) replicates the old decorator behavior from Babel 5.",
  "devDependencies": {
    "babel-cli": "^6.2.0",
    "babel-plugin-transform-class-properties": "^6.3.0",
    "babel-plugin-transform-runtime": "^6.1.18",
    "babel-preset-es2015": "^6.1.18",
    "chai": "^3.4.1",
    "mocha": "^2.3.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-jYHwjzRXRelYQ1uGm353zNzf3QmtdCfvJbuYTZ4gKveK7M9H1fs3a5AKdY1JUDl0z97E30ukORW1dzhWvsabtA==",
    "shasum": "0e492dffa0edd70529072887f8aa86d4dd8b40a1",
    "tarball": "https://registry.npmjs.org/babel-plugin-transform-decorators-legacy/-/babel-plugin-transform-decorators-legacy-1.3.5.tgz",
    "fileCount": 6,
    "unpackedSize": 20340,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbDv+NCRA9TVsSAnZWagAAXvgP+wUOwpWrJxZn27YIHfBt\nFLj/Agdsr5DfRn4NEdkp0yJ5OiSRV8Rd0TxQYgOUK3Yzl4gBf8LNwjW7hqQV\nB1DUb4tOpNTsHcmGA+dLTLyC+IejA793Mqslx0Unb85/zYMSphrlBuL0mQ9Q\nW6CcNAuyAqNOE2npUpEDNhVB1dF1lv1hA/1ycd2MHoglOkD0+obIud/c0ldT\nitr5aCdbYCcy0rdEs8v47eE/b8OfMIHWYFq4ED2/1aIOGcDKpGF6RrewAHMP\n+a23r36mLLJe9aIgXCaTJM6esU/TfjOxh155p84oN5g32vc20O3dp3irSoEe\nzT/teClG2Ax91SsyKbLAsBRb3LEOPbNlfeTeQh4u9Oo/E1ZLXD6FApOPyU+f\n1MEUutuISfQvKfdxwKXs8DMHoduo3c7BLcGT5Z7hK9UVRrriXklzH6YeXaNS\nIsIfvT1S9LYjni3le2HGBGZkZ9VLt5jh///QiMOuy/TiyNU5BkmNE1kKpjSW\njwZEBtgIH3XIhSiCAzjCT2cmFOtJk1lRKIN+WoLIy9Zg7AbA6/SXZUWJZv6u\nhXwkKXyZ55Wwb8/Hlqk1HBAMxRGymeQOYKiGNfk8i31w9czF4cyFZstQcDAK\nWUO7Ny+xnkrn6UhOKqLd3OM3huyj4HCQb0dnzqdahfcF6QghthKn+b+pNWur\nyEu3\r\n=a4QJ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "ee7a789b92025cfc89e67a13787ba57894a22f12",
  "homepage": "https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy#readme",
  "keywords": [
    "babel",
    "babel-plugin",
    "es7",
    "decorators"
  ],
  "license": "MIT",
  "main": "lib",
  "maintainers": [
    {
      "name": "ide",
      "email": "ide+npm@jameside.com"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    }
  ],
  "name": "babel-plugin-transform-decorators-legacy",
  "optionalDependencies": {},
  "readme": "\n\n# Babel Legacy Decorator plugin\n\nThis is a plugin for Babel 6 that is meant to replicate the old decorator behavior from\nBabel 5 in order to allow people to more easily transition to Babel 6 without needing to\nbe blocked on updates to the decorator proposal or for Babel to re-implement it.\n\n## Babel >= 7.x\n\nThis plugin is specifically for Babel 6.x. If you're using Babel 7, this plugin is not for you.\nBabel 7's `@babel/plugin-proposal-decorators` officially supports the same logic that this\nplugin has, but integrates better with Babel 7's other plugins. You can enable this with\n\n```json\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n  ]\n}\n```\nin your Babel configuration. Note that `legacy: true` is specifically needed if you\nwant to get the same behavior as `transform-decorators-legacy` because there\nare newer versions of the decorator specification coming out, and they do not\nbehave the same way as this plugin does.\n\n\n## Installation & Usage\n\n    $ npm install --save-dev babel-plugin-transform-decorators-legacy\n\nAdd the following line to your .babelrc file:\n\n    {\n        \"plugins\": [\"transform-decorators-legacy\"]\n    }\n\n#### NOTE: Order of Plugins Matters!\nIf you are including your plugins manually and using `transform-class-properties`, make sure that `transform-decorators-legacy` comes *before* `transform-class-properties`.\n\n```js\n/// WRONG\n\n\"plugins\": [\n  \"transform-class-properties\",\n  \"transform-decorators-legacy\"\n]\n\n// RIGHT\n\n\"plugins\": [\n  \"transform-decorators-legacy\",\n  \"transform-class-properties\"\n]\n```\n\n## Why \"legacy\"?\n\nDecorators are still only a relatively new proposal, and they are (at least currently) still\nin flux. Many people have started to use them in their original form, where each decorator\nis essentially a function of the form\n\n    function(target, property, descriptor){}\n\nThis form is very likely to change moving forward, and Babel 6 did not wish to support\nthe older form when it was known that it would change in the future. As such, I created this\nplugin to help people transition to Babel 6 without requiring them to drop their decorators\nor requiring them to wait for the new proposal update and then update all their code.\n\n## Best Effort\n\nThis plugin is a best effort to be compatible with Babel 5's transpiler output, but there\nare a few things that were difficult to reproduce, and a few things that were simply incorrect\nin Babel 5 with respect to the decorators proposal.\n\nTwo main things to mention as differences, though not things you are likely to encounter:\n\n1. Decorators expressions are evaluated top to bottom, and executed bottom to top. e.g.\n\n    ```\n    function dec(id){\n        console.log('evaluated', id);\n        return (target, property, descriptor) => console.log('executed', id);\n    }\n\n    class Example {\n        @dec(1)\n        @dec(2)\n        method(){}\n    }\n    ```\n\n    In Babel 5, this would output:\n\n    ```\n    evaluated 2\n    evaluated 1\n    executed 2\n    executed 1\n    ```\n\n    With this plugin, it will result in:\n\n    ```\n    evaluated 1\n    evaluated 2\n    executed 2\n    executed 1\n    ```\n\n    which is what the spec dictates as the correct behavior and was incorrect in Babel 5.\n\n2. Static class property initializers are evaluated once up front.\n\n    If you decorate a static class property, you will get a descriptor with an `initializer` property.\n    However whereas with Babel 5 this could be re-executed multiple times with potentially differing\n    results, `decorators-legacy` will precompute the value and return an initializer that will\n    return that value. e.g.\n\n    ```\n    function dec(target, prop, descriptor){\n        let {initializer} = descriptor;\n        delete descriptor.initializer;\n        delete descriptor.writable;\n\n        descriptor.get = function(){\n            return initializer.call(this);\n        };\n    }\n\n    var i = 0;\n\n    class Example {\n        @dec\n        static prop = i++;\n    }\n    ```\n\n    In Babel 5, every access to `prop` would increment `i`.\n    In Babel 6, the very first value of `i` will be cached for future `initializer` calls.\n\n    The spec is a little vague around how initializers work for repeat calls, and I'd consider\n    calling an `initializer` multiple times to be a mistake in general, so hopefully this will\n    not cause anyone trouble.\n\n## License\n\nMIT (c) 2015\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "prepublish": "npm run build",
    "test": "babel-node node_modules/.bin/_mocha -- test",
    "watch": "babel src -d lib -w"
  },
  "version": "1.3.5"
}
