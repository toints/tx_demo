{
  "_args": [
    [
      {
        "raw": "babel-plugin-system-import-transformer@3.1.0",
        "scope": null,
        "escapedName": "babel-plugin-system-import-transformer",
        "name": "babel-plugin-system-import-transformer",
        "rawSpec": "3.1.0",
        "spec": "3.1.0",
        "type": "version"
      },
      "/home/ubuntu/test/demo/node_modules/vnscoinjs-util/node_modules/documentation"
    ]
  ],
  "_from": "babel-plugin-system-import-transformer@3.1.0",
  "_id": "babel-plugin-system-import-transformer@3.1.0",
  "_inCache": true,
  "_location": "/babel-plugin-system-import-transformer",
  "_nodeVersion": "6.10.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/babel-plugin-system-import-transformer-3.1.0.tgz_1488208059881_0.7693237832281739"
  },
  "_npmUser": {
    "name": "thgreasi",
    "email": "thgreasi@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-plugin-system-import-transformer@3.1.0",
    "scope": null,
    "escapedName": "babel-plugin-system-import-transformer",
    "name": "babel-plugin-system-import-transformer",
    "rawSpec": "3.1.0",
    "spec": "3.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/documentation"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-system-import-transformer/-/babel-plugin-system-import-transformer-3.1.0.tgz",
  "_shasum": "d37f0cae8e61ef39060208331d931b5e630d7c5f",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-system-import-transformer@3.1.0",
  "_where": "/home/ubuntu/test/demo/node_modules/vnscoinjs-util/node_modules/documentation",
  "author": {
    "name": "Thodoris Greasidis"
  },
  "bugs": {
    "url": "https://github.com/thgreasi/babel-plugin-system-import-transformer/issues"
  },
  "dependencies": {
    "babel-plugin-syntax-dynamic-import": "^6.18.0"
  },
  "description": "Babel plugin that replaces System.import with the equivalent UMD pattern",
  "devDependencies": {
    "babel-cli": "^6.14.0",
    "babel-core": "^6.14.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-register": "^6.14.0",
    "chalk": "^1.1.3",
    "clear": "0.0.1",
    "diff": "^2.2.3",
    "js-beautify": "^1.6.2",
    "watch": "^0.18.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d37f0cae8e61ef39060208331d931b5e630d7c5f",
    "tarball": "https://registry.npmjs.org/babel-plugin-system-import-transformer/-/babel-plugin-system-import-transformer-3.1.0.tgz"
  },
  "gitHead": "8a803b8bcc811d7adbb2b17d7c8f3c98ee244870",
  "homepage": "https://github.com/thgreasi/babel-plugin-system-import-transformer",
  "keywords": [
    "babel",
    "babel-plugin",
    "system",
    "import",
    "transformer",
    "UMD"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "thgreasi",
      "email": "thgreasi@gmail.com"
    }
  ],
  "name": "babel-plugin-system-import-transformer",
  "optionalDependencies": {},
  "readme": "# babel-plugin-system-import-transformer\n[![Build Status](https://travis-ci.org/thgreasi/babel-plugin-system-import-transformer.svg?branch=master)](https://travis-ci.org/thgreasi/babel-plugin-system-import-transformer)\n[![npm](https://img.shields.io/npm/v/babel-plugin-system-import-transformer.svg)](https://www.npmjs.com/package/babel-plugin-system-import-transformer)\n[![npm](https://img.shields.io/npm/dm/babel-plugin-system-import-transformer.svg)](https://www.npmjs.com/package/babel-plugin-system-import-transformer)\n\n[Babel](https://babeljs.io/) plugin that replaces import() & System.import() with the equivalent UMD pattern\n\n## Transforms\n\n```js\nimport('./utils/serializer').then(function(module){\n    console.log(module);\n});\n\n// AND\n\nSystem.import('./utils/serializer').then(function(module){\n    console.log(module);\n});\n```\nto\n```js\nnew Promise(function (resolve, reject) {\n    var global = window;\n\n    if (typeof global.define === 'function' && global.define.amd) {\n        global.require(['utilsSerializer'], resolve, reject);\n    } else if (typeof module !== 'undefined' && (module.exports && typeof require !== 'undefined') ||\n               typeof module !== 'undefined' && (module.component && (global.require && global.require.loader === 'component'))) {\n        resolve(require('./utils/serializer'));\n    } else {\n        resolve(global['utilsSerializer']);\n    }\n}).then(function(module){\n    console.log(module);\n});\n```\n\n## Requirements\n\n- Babel v6.14.x\n\n**Notes:**\n- for babel < v6.14 please use the [v2.x.x releases](https://github.com/thgreasi/babel-plugin-system-import-transformer/tree/v2.x.x-stable).\n- for babel v5 please use the [v1.x.x releases](https://github.com/thgreasi/babel-plugin-system-import-transformer/tree/v1.x.x-stable).\n\n## Installation\n\n`npm install babel-plugin-system-import-transformer`\n\nAdd \"system-import-transformer\" to your `plugins` argument or inside the `plugins` options of your `Gruntfile`.\n\n```js\n// in .babelrc\n{\n    \"plugins\": [\n        \"system-import-transformer\"\n    ]\n}\n\n// in grunt.js\nbabel: {\n    options: {\n        plugins: [\"system-import-transformer\"]\n    }\n}\n```\n\n## Configuration\n\n### Relative paths and Aliases\n\nThe [babel's getModuleId option](http://babeljs.io/docs/usage/options/#formatting-options) (if defined) is used for the AMD and Global Module import.\n\n```js\nbabel: {\n    options: {\n        moduleIds: true,\n        getModuleId: function(moduleName) {\n            var files = {\n                'src/utils/serializer': 'utilsSerializer'\n            };\n\n            return files[moduleName] || moduleName.replace('src/', '');\n        },\n        plugins: ['system-import-transformer']\n    }\n}\n```\n\n## Options\n\n### commonJS\n\nCommonJS specific options.\n\n#### commonJS.useRequireEnsure\nType: Boolean  \nValues: [**`false`**/`true`]  \n\nWhen set to `true`, all CommonJS import statements will use Webpack's `require.ensure()` syntax. This enables dynamic module loading in CommonJS (Webpack) and works both for the `UMD` and (of course) `CommonJS` module target types.\n\n```js\n{\n    \"plugins\": [\n        [\"system-import-transformer\", { \"commonJS\": { \"useRequireEnsure\": true } }]\n    ]\n}\n\n// the CommonJS code part will look like:\nnew Promise(function (resolve) {\n    require.ensure([], function (require) {\n        resolve(require('./utils/serializer'));\n    });\n}).then(function(module){ console.log(module); });\n```\n\n### modules\nType: String  \nValues: [**`UMD`**/`amd`/`common`]  \n[Example](test/fixtures/common/.babelrc_extra)\n\nSpecifies the target compilation module system. When set configured to an option other than `UMD` then `system-import-transformer` will omit the module type detection code and just insert the appropriate require statement wrapped with a `Promise`.\n\n```js\n// targeting AMD\n{\n    \"plugins\": [\n        [\"system-import-transformer\", { \"modules\": \"amd\" }]\n    ]\n}\n\n// will emit an AMD specific code like:\nnew Promise(function (resolve, reject) {\n    var global = window;\n    global.require(['utilsSerializer'], resolve, reject);\n}).then(function(module){ console.log(module); });\n```\n\n```js\n// targeting CommonJS\n{\n    \"plugins\": [\n        [\"system-import-transformer\", { \"modules\": \"common\" }]\n    ]\n}\n\n// will emit a CommonJS specific code like:\nnew Promise(function (resolve, reject) {\n    resolve(require('./utils/serializer'));\n}).then(function(module){ console.log(module); });\n```\n\n### syntax\n\nSyntax specific options.\n\n#### syntax.import\nType: Boolean  \nValues: [**`true`**/`false`]  \n[Example](test/fixtures/umd-no-import/.babelrc_extra)\n\nWhen set to `false`, babel will not transpile `import()` statements.\n\n#### syntax[\"system-import\"]\nType: Boolean  \nValues: [**`true`**/`false`]  \n[Example](test/fixtures/umd-no-system-import/.babelrc_extra)\n\nWhen set to `false`, babel will not transpile `System.import()` statements.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thgreasi/babel-plugin-system-import-transformer.git"
  },
  "scripts": {
    "build": "babel src --out-dir dist",
    "prepublish": "babel src --out-dir dist",
    "test": "npm run-script build && node test",
    "watch": "node test --watch"
  },
  "version": "3.1.0"
}
