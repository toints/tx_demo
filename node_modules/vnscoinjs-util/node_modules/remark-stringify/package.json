{
  "_args": [
    [
      {
        "raw": "remark-stringify@^5.0.0",
        "scope": null,
        "escapedName": "remark-stringify",
        "name": "remark-stringify",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "/home/ubuntu/test/demo/node_modules/vnscoinjs-util/node_modules/remark"
    ]
  ],
  "_from": "remark-stringify@>=5.0.0 <6.0.0",
  "_id": "remark-stringify@5.0.0",
  "_inCache": true,
  "_location": "/remark-stringify",
  "_nodeVersion": "9.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/remark-stringify-5.0.0.tgz_1516454458376_0.5664030679035932"
  },
  "_npmUser": {
    "name": "wooorm",
    "email": "tituswormer@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "remark-stringify@^5.0.0",
    "scope": null,
    "escapedName": "remark-stringify",
    "name": "remark-stringify",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/remark"
  ],
  "_resolved": "https://registry.npmjs.org/remark-stringify/-/remark-stringify-5.0.0.tgz",
  "_shasum": "336d3a4d4a6a3390d933eeba62e8de4bd280afba",
  "_shrinkwrap": null,
  "_spec": "remark-stringify@^5.0.0",
  "_where": "/home/ubuntu/test/demo/node_modules/vnscoinjs-util/node_modules/remark",
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com",
    "url": "http://wooorm.com"
  },
  "bugs": {
    "url": "https://github.com/remarkjs/remark/issues"
  },
  "contributors": [
    {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    },
    {
      "name": "Eugene Sharygin",
      "email": "eush77@gmail.com"
    }
  ],
  "dependencies": {
    "ccount": "^1.0.0",
    "is-alphanumeric": "^1.0.0",
    "is-decimal": "^1.0.0",
    "is-whitespace-character": "^1.0.0",
    "longest-streak": "^2.0.1",
    "markdown-escapes": "^1.0.0",
    "markdown-table": "^1.1.0",
    "mdast-util-compact": "^1.0.0",
    "parse-entities": "^1.0.2",
    "repeat-string": "^1.5.4",
    "state-toggle": "^1.0.0",
    "stringify-entities": "^1.0.1",
    "unherit": "^1.0.4",
    "xtend": "^4.0.1"
  },
  "description": "Markdown compiler for remark",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-Ws5MdA69ftqQ/yhRF9XhVV29mhxbfGhbz0Rx5bQH+oJcNhhSM6nCu1EpLod+DjrFGrU0BMPs+czVmJZU7xiS7w==",
    "shasum": "336d3a4d4a6a3390d933eeba62e8de4bd280afba",
    "tarball": "https://registry.npmjs.org/remark-stringify/-/remark-stringify-5.0.0.tgz"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "http://remark.js.org",
  "keywords": [
    "markdown",
    "abstract",
    "syntax",
    "tree",
    "ast",
    "stringify"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "wooorm",
      "email": "tituswormer@gmail.com"
    }
  ],
  "name": "remark-stringify",
  "optionalDependencies": {},
  "readme": "# remark-stringify [![Build Status][build-badge]][build-status] [![Coverage Status][coverage-badge]][coverage-status] [![Chat][chat-badge]][chat]\n\n[Compiler][] for [**unified**][unified].  Stringifies an\n[**MDAST**][mdast] syntax tree to markdown.  Used in the [**remark**\nprocessor][processor].  Can be [extended][extend] to change how\nmarkdown is compiled.\n\n## Installation\n\n[npm][]:\n\n```sh\nnpm install remark-stringify\n```\n\n## Usage\n\n```js\nvar unified = require('unified');\nvar createStream = require('unified-stream');\nvar parse = require('remark-parse');\nvar toc = require('remark-toc');\nvar stringify = require('remark-stringify');\n\nvar processor = unified()\n  .use(parse)\n  .use(toc)\n  .use(stringify, {\n    bullet: '*',\n    fence: '~',\n    fences: true,\n    incrementListMarker: false\n  });\n\nprocess.stdin\n  .pipe(createStream(processor))\n  .pipe(process.stdout);\n```\n\n## Table of Contents\n\n*   [API](#api)\n    *   [processor.use(stringify\\[, options\\])](#processorusestringify-options)\n    *   [stringify.Compiler](#stringifycompiler)\n*   [Extending the Compiler](#extending-the-compiler)\n    *   [Compiler#visitors](#compilervisitors)\n    *   [function visitor(node\\[, parent\\])](#function-visitornode-parent)\n*   [License](#license)\n\n## API\n\n### `processor.use(stringify[, options])`\n\nConfigure the `processor` to stringify [**MDAST**][mdast] syntax trees\nto markdown.\n\n##### `options`\n\nOptions are passed directly, or passed later through [`processor.data()`][data].\n\n###### `options.gfm`\n\nStringify with the required escapes for GFM compatible markdown (`boolean`,\ndefault: `true`).\n\n*   Escape pipes (`|`, for tables)\n*   Escape colons (`:`, for literal URLs)\n*   Escape tildes (`~`, for strike-through)\n\n###### `options.commonmark`\n\nStringify for CommonMark compatible markdown (`boolean`, default: `false`).\n\n*   Compile adjacent blockquotes separately\n*   Escape more characters using slashes, instead of as entities\n\n###### `options.pedantic`\n\nStringify for pedantic compatible markdown (`boolean`, default: `false`).\n\n*   Escape underscores in words\n\n###### `options.entities`\n\nHow to stringify entities (`string` or `boolean`, default: `false`):\n\n*   `true` — Entities are generated for special HTML characters\n    (`&` > `&amp;`) and non-ASCII characters (`©` > `&copy;`).\n    If named entities are not (widely) supported, numbered character\n    references are used (`’` > `&#x2019;`)\n*   `'numbers'` — Numbered entities are generated (`&` > `&#x26;`)\n    for special HTML characters and non-ASCII characters\n*   `'escape'` — Special HTML characters are encoded (`&` >\n    `&amp;`, `’` > `&#x2019;`), non-ASCII characters not (ö persists)\n\n###### `options.setext`\n\nCompile headings, when possible, in Setext-style (`boolean`, default: `false`).\nUses `=` for level one headings and `-` for level two headings.  Other heading\nlevels are compiled as ATX (respecting `closeAtx`).\n\n###### `options.closeAtx`\n\nCompile ATX headings with the same amount of closing hashes as opening hashes\n(`boolean`, default: `false`).\n\n###### `options.looseTable`\n\nCreate tables without fences: initial and final pipes (`boolean`, default:\n`false`).\n\n###### `options.spacedTable`\n\nCreate tables without spacing between pipes and content (`boolean`, default:\n`true`).\n\n###### `options.paddedTable`\n\nCreate tables with padding in each cell so that they are the same size\n(`boolean`, default: `true`).\n\n###### `options.stringLength`\n\nFunction passed to [`markdown-table`][markdown-table] to detect the length of a\ntable cell (`Function`, default: [`s => s.length`][string-length]).\n\n###### `options.fence`\n\nFence marker to use for code blocks (`'~'` or ``'`'``, default: ``'`'``).\n\n###### `options.fences`\n\nStringify code blocks without language with fences (`boolean`, default:\n`false`).\n\n###### `options.bullet`\n\nBullet marker to use for unordered list items (`'-'`, `'*'`, or `'+'`,\ndefault: `'-'`).\n\n###### `options.listItemIndent`\n\nHow to indent the content from list items (`'tab'`, `'mixed'` or `'1'`,\ndefault: `'tab'`).\n\n*   `'tab'`: use tab stops (4 spaces)\n*   `'1'`: use one space\n*   `'mixed'`: use `1` for tight and `tab` for loose list items\n\n###### `options.incrementListMarker`\n\nWhether to increment ordered list item bullets (`boolean`, default: `true`).\n\n###### `options.rule`\n\nMarker to use for thematic breaks / horizontal rules (`'-'`, `'*'`, or `'_'`,\ndefault: `'*'`).\n\n###### `options.ruleRepetition`\n\nNumber of markers to use for thematic breaks / horizontal rules (`number`,\ndefault: `3`).  Should be `3` or more.\n\n###### `options.ruleSpaces`\n\nWhether to pad thematic break (horizontal rule) markers with spaces (`boolean`,\ndefault `true`).\n\n###### `options.strong`\n\nMarker to use for importance (`'_'` or `'*'`, default `'*'`).\n\n###### `options.emphasis`\n\nMarker to use for emphasis (`'_'` or `'*'`, default `'_'`).\n\n### `stringify.Compiler`\n\nAccess to the raw [compiler][], if you need it.\n\n## Extending the Compiler\n\nIf this plugin is used, it adds a [`Compiler`][compiler] constructor\nto the `processor`.  Other plugins can change and add visitors on\nthe compiler’s prototype to change how markdown is stringified.\n\nThe below plugin modifies a [visitor][] to add an extra blank line\nbefore level two headings.\n\n```js\nmodule.exports = gap;\n\nfunction gap() {\n  var Compiler = this.Compiler;\n  var visitors = Compiler.prototype.visitors;\n  var original = visitors.heading;\n\n  visitors.heading = function heading(node) {\n    return (node.depth === 2 ? '\\n' : '') + original.apply(this, arguments);\n  }\n}\n```\n\n### `Compiler#visitors`\n\nAn object mapping [node][] types to [`visitor`][visitor]s.\n\n### `function visitor(node[, parent])`\n\nStringify `node`.\n\n###### Parameters\n\n*   `node` ([`Node`][node]) — Node to compile\n*   `parent` ([`Node`][node], optional) — Parent of `node`\n\n###### Returns\n\n`string`, the compiled given `node`.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[build-badge]: https://img.shields.io/travis/remarkjs/remark.svg\n\n[build-status]: https://travis-ci.org/remarkjs/remark\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/remarkjs/remark.svg\n\n[coverage-status]: https://codecov.io/github/remarkjs/remark\n\n[chat-badge]: https://img.shields.io/gitter/room/remarkjs/Lobby.svg\n\n[chat]: https://gitter.im/remarkjs/Lobby\n\n[license]: https://github.com/remarkjs/remark/blob/master/LICENSE\n\n[author]: http://wooorm.com\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[unified]: https://github.com/unifiedjs/unified\n\n[processor]: https://github.com/remarkjs/remark\n\n[data]: https://github.com/unifiedjs/unified#processordatakey-value\n\n[compiler]: https://github.com/unifiedjs/unified#processorcompiler\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[node]: https://github.com/syntax-tree/unist#node\n\n[extend]: #extending-the-compiler\n\n[visitor]: #function-visitornode-parent\n\n[markdown-table]: https://github.com/wooorm/markdown-table\n\n[string-length]: https://github.com/wooorm/markdown-table#stringlengthcell\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/remarkjs/remark/tree/master/packages/remark-stringify"
  },
  "version": "5.0.0",
  "xo": false
}
